#include <iostream>

class Lockable
{
public:
    virtual void lock() = 0;
    virtual void unlock() = 0;
};

class NonLocking : public Lockable
{
public:
    void lock() override
    {
        std::cout << "Door does not lock - ignoring" << std::endl;
    }

    void unlock() override
    {
        std::cout << "Door cannot unlock because it cannot lock" << std::endl;
    }
};

class Password : public Lockable
{
public:
    void lock() override
    {
        std::cout << "Door locked using password!" << std::endl;
    }

    void unlock() override
    {
        std::cout << "Door unlocked using password!" << std::endl;
    }
};

class KeyCard : public Lockable
{
public:
    void lock() override
    {
        //...
    }

    void unlock() override
    {
        //...
    }
};

class Openable
{
public:
    virtual void open() = 0;
    virtual void close() = 0;
};

class Standard : public Openable
{
public:
    void open() override
    {
        std::cout << "Pushing door open" << std::endl;
    }

    void close() override
    {
        std::cout << "Pulling door closed" << std::endl;
    }
};

class Revolving : public Openable
{
public:
    void open() override
    {
        //...
    }

    void close() override
    {
        //...
    }
};

class Sliding : public Openable
{
public:
    void open() override
    {
        //...
    }

    void close() override
    {
        //...
    }
};

class Door
{
protected:
    Lockable *lockBehavior;
    Openable *openBehavior;

public:
    Door() : lockBehavior(nullptr), openBehavior(nullptr) {}

    void setLockBehavior(Lockable *l)
    {
        lockBehavior = l;
    }

    void setOpenBehavior(Openable *o)
    {
        openBehavior = o;
    }

    void performLock()
    {
        if (lockBehavior)
        {
            lockBehavior->lock();
        }
    }

    void performUnlock()
    {
        if (lockBehavior)
        {
            lockBehavior->unlock();
        }
    }

    void performOpen()
    {
        if (openBehavior)
        {
            openBehavior->open();
        }
    }

    void performClose()
    {
        if (openBehavior)
        {
            openBehavior->close();
        }
    }

    float getDimensions()
    {
        //...
    }
};

class ClosetDoor : public Door
{
    //...
};

class ExternalDoor : public Door
{
    //...
};

class SafeDepositDoor : public Door
{
    //...
};

class SlidingDoor : public Door
{
    //...
};

int main()
{
    Door *c = new ClosetDoor();

    c->setOpenBehavior(new Standard());
    c->setLockBehavior(new NonLocking());

    c->performOpen();
    c->performClose();

    c->performLock();
    c->performUnlock();

    // Upgrade the door to a password protected door
    c->setLockBehavior(new Password());
    c->performLock();
    c->performUnlock();

    delete c;

    return 0;
}

